# Generate-TestData.ps1
<#
.SYNOPSIS
    Generates a collection of random test files with various extensions and content types.

.DESCRIPTION
    This script creates a set of test files with random content and different file extensions
    for testing purposes. It can create random subdirectories and distribute files across them.
    Files are generated with properly formatted content for each type (JSON, XML, CSV, etc.)
    until the total requested size is reached.

.PARAMETER TargetPath
    The directory where the test files will be created. If the directory doesn't exist,
    it will be created. Defaults to ".\TestData" in the current directory.

.PARAMETER TotalSizeMB
    The approximate total size in megabytes of all generated files combined.
    Defaults to 10 MB.

.PARAMETER SubdirCount
    The number of subdirectories to create. Files will be randomly distributed across
    these directories. Set to 0 for no subdirectories. Defaults to 0.

.PARAMETER MaxDepth
    The maximum depth of nested subdirectories. Only applies if SubdirCount > 0.
    A depth of 1 means all subdirectories are at the root level.
    A depth of 2 allows one level of nesting, and so on. Defaults to 1.

.EXAMPLE
    .\Generate-TestData.ps1
    Generates approximately 10MB of random test files in the .\TestData directory.

.EXAMPLE
    .\Generate-TestData.ps1 -TargetPath "C:\TestFiles" -TotalSizeMB 15
    Generates approximately 15MB of random test files in C:\TestFiles.

.EXAMPLE
    .\Generate-TestData.ps1 -SubdirCount 5 -MaxDepth 2
    Generates 10MB of files distributed across 5 randomly named subdirectories,
    with possible one level of nesting.

.NOTES
    File Types Generated:
    - Text files (.txt, .log)
    - Binary files (.dat, .bin)
    - JSON files with random data structures
    - XML files with random elements
    - CSV files with random records
    - Markdown files

    Requirements:
    - Windows PowerShell 5.1 or PowerShell Core 6.0+
    - Write permissions to the target directory

    Version: 1.1
    Author: Generated by Claude
    Last Updated: 2024-12-04
#>
[CmdletBinding()]
param(
    [Parameter(Mandatory=$false)]
    [string]$TargetPath = ".\TestData",
    
    [Parameter(Mandatory=$false)]
    [ValidateRange(1,1000)]
    [int]$TotalSizeMB = 10,

    [Parameter(Mandatory=$false)]
    [ValidateRange(0,100)]
    [int]$SubdirCount = 0,

    [Parameter(Mandatory=$false)]
    [ValidateRange(1,5)]
    [int]$MaxDepth = 1
)

# Function to generate random directory names
function Get-RandomDirName {
    $adjectives = @('temp', 'test', 'demo', 'sample', 'mock', 'fake', 'beta', 'dev', 'staging', 'backup')
    $nouns = @('data', 'files', 'docs', 'content', 'assets', 'resources', 'archive', 'storage', 'cache', 'logs')
    $suffix = Get-Random -Minimum 100 -Maximum 999
    
    return "$($adjectives | Get-Random)_$($nouns | Get-Random)_$suffix"
}

# Function to generate random text content
function Get-RandomText {
    param([int]$length)
    $chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 .,!?-_'
    return -join ((1..$length) | ForEach-Object { $chars[(Get-Random -Maximum $chars.Length)] })
}

# Function to generate random JSON content
function Get-RandomJson {
    param([int]$complexity)
    $data = @{
        id = [guid]::NewGuid().ToString()
        timestamp = Get-Date
        value = Get-Random -Minimum 1 -Maximum 1000
        items = @()
    }
    1..$complexity | ForEach-Object {
        $data.items += @{
            name = "Item$_"
            value = Get-Random -Minimum 1 -Maximum 100
            active = (Get-Random -Minimum 0 -Maximum 2) -eq 1
        }
    }
    return $data | ConvertTo-Json
}

# Function to generate random CSV content
function Get-RandomCsv {
    param([int]$rows)
    $csv = "ID,Name,Value,Date`n"
    1..$rows | ForEach-Object {
        $csv += "$(([guid]::NewGuid().ToString())),Item$_,$(Get-Random -Minimum 1 -Maximum 1000),$((Get-Date).AddDays(-$_).ToString('yyyy-MM-dd'))`n"
    }
    return $csv
}

# Check if target directory exists and warn user
if (Test-Path $TargetPath) {
    Write-Host "`nWARNING: TARGET DIRECTORY ALREADY EXISTS: $TargetPath" -ForegroundColor Red
    Write-Host "Files will be added to the existing directory." -ForegroundColor Red
}

# Display configuration and get confirmation
Write-Host "`nTest Data Generator Configuration:"
Write-Host "Target Path: $TargetPath"
Write-Host "Total Size: $TotalSizeMB MB"
if ($SubdirCount -gt 0) {
    Write-Host "Subdirectories: $SubdirCount (max depth: $MaxDepth)"
}

Write-Host "`nType 'YES' to proceed: " -NoNewline
$confirmation = Read-Host

if ($confirmation -ne "YES") {
    Write-Host "`nOperation cancelled by user" -ForegroundColor Red
    exit
}

# Create target directory if it doesn't exist
if (-not (Test-Path $TargetPath)) {
    New-Item -ItemType Directory -Path $TargetPath | Out-Null
    Write-Host "`nCreated directory: $TargetPath"
}

# Define possible file extensions and their content types
$fileTypes = @(
    @{Extension = ".txt"; ContentType = "text"},
    @{Extension = ".log"; ContentType = "text"},
    @{Extension = ".dat"; ContentType = "binary"},
    @{Extension = ".bin"; ContentType = "binary"},
    @{Extension = ".json"; ContentType = "json"},
    @{Extension = ".csv"; ContentType = "csv"}
)

# Create subdirectories if requested
$allDirs = @($TargetPath)
if ($SubdirCount -gt 0) {
    Write-Host "`nCreating directory structure..."
    
    $dirDepths = @{$TargetPath = 0}
    $createdDirs = 0
    $attempts = 0
    $maxAttempts = $SubdirCount * 3  # Limit the number of attempts to avoid infinite loops
    
    while ($createdDirs -lt $SubdirCount -and $attempts -lt $maxAttempts) {
        $validParents = $allDirs | Where-Object { $dirDepths[$_] -lt $MaxDepth }
        $parentDir = $validParents | Get-Random
        
        $newDirName = Get-RandomDirName
        $newDirPath = Join-Path $parentDir $newDirName
        
        if (-not (Test-Path $newDirPath)) {
            New-Item -ItemType Directory -Path $newDirPath | Out-Null
            $allDirs += $newDirPath
            $dirDepths[$newDirPath] = $dirDepths[$parentDir] + 1
            $createdDirs++
            Write-Host "Created subdirectory $createdDirs of $SubdirCount : $newDirPath"
        }
        
        $attempts++
    }
    
    if ($createdDirs -lt $SubdirCount) {
        Write-Host "Warning: Could only create $createdDirs of $SubdirCount requested directories" -ForegroundColor Yellow
    }
}

# Initialize counters
$totalBytes = $TotalSizeMB * 1MB
$bytesCreated = 0
$fileCount = 0
$startTime = Get-Date

Write-Host "`nGenerating files..."

# Generate files until we reach the target size
while ($bytesCreated -lt $totalBytes) {
    # Show progress
    $percentComplete = [math]::Min(100, [math]::Round(($bytesCreated / $totalBytes) * 100))
    Write-Progress -Activity "Generating Files" -Status "$percentComplete% Complete" -PercentComplete $percentComplete
    
    $fileType = $fileTypes | Get-Random
    
    # Fix for Get-Random invalid range issue
    $remainingBytes = $totalBytes - $bytesCreated
    $maxSize = [Math]::Min(1MB, $remainingBytes)
    $fileSize = if ($maxSize -le 1KB) { $remainingBytes } else { Get-Random -Minimum 1KB -Maximum $maxSize }
    
    $fileName = "file_$(Get-Random)$($fileType.Extension)"
    
    $targetDir = $allDirs | Get-Random
    $filePath = Join-Path $targetDir $fileName
    
    switch ($fileType.ContentType) {
        "text" {
            Get-RandomText -length $fileSize | Out-File -FilePath $filePath -NoNewline
        }
        "binary" {
            $buffer = [byte[]]::new($fileSize)
            (New-Object Random).NextBytes($buffer)
            [IO.File]::WriteAllBytes($filePath, $buffer)
        }
        "json" {
            $complexity = [Math]::Max(1, [Math]::Min(100, $fileSize / 100))
            Get-RandomJson -complexity $complexity | Out-File -FilePath $filePath
        }
        "csv" {
            $rows = [Math]::Max(1, [Math]::Min(1000, $fileSize / 50))
            Get-RandomCsv -rows $rows | Out-File -FilePath $filePath -NoNewline
        }
    }
    
    $actualSize = (Get-Item $filePath).Length
    $bytesCreated += $actualSize
    $fileCount++
    
    Write-Host "Created $fileName ($('{0:N2}' -f ($actualSize/1KB)) KB)"
}

Write-Progress -Activity "Generating Files" -Completed

# Display completion summary
$totalTime = (Get-Date) - $startTime
Write-Host "`nOperation Complete!"
Write-Host "Files Created: $fileCount"
Write-Host "Total Size: $([math]::Round($bytesCreated/1MB, 2)) MB"
Write-Host "Time Taken: $([math]::Round($totalTime.TotalSeconds, 2)) seconds"
if ($SubdirCount -gt 0) {
    Write-Host "Subdirectories: $SubdirCount"
}
Write-Host "Location: $TargetPath"